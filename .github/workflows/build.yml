name: Build
# TODO: nuget, vcpkg on macOS, $(brew --prefix llvm)/bin/clang (llvm11), llvm12 is default
on:
  push:
  schedule:
    - cron: '0 12 * * 0'
  repository_dispatch:

env:
  FF_VER: master
  LLVM_VER: 12
  NDK_VERSION: r22
  NINJA_STATUS: '[%f/%t %e %r]'
  SF_PW: ${{ secrets.SF_PW }}
  SF_USER: ${{ secrets.SF_USER }}

jobs:
  macOS:
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: macos-latest
    env:
      TARGET_OS: 'macOS'
      TARGET_ARCH: ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
        arch: [x86_64, arm64]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
   # - name: Setup Xcode
   #   run: sudo xcode-select -s /Applications/Xcode_12.4.app
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: |
          ./mdk/external
          !./mdk/external/lib/macOS/libvulkan.tbd
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
# why may failed to cache/restore /usr/local/bin/sshpass?
# no build cache because build dir content changes but key should not, then no cache save.
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh

    - name: Configure CMake
      if: ${{ matrix.arch == 'x86_64' }}
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: mdk
      run: |
        pwd
        cmake -GNinja -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -H. -Bbuild/${TARGET_OS} -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk # no dSYM for lto, dsymutil: no debug symbols in executable (-arch x86_64)
    - name: Configure CMake
      if: ${{ startsWith(matrix.arch, 'arm64') }} # arm64, arm64e
      shell: bash
      working-directory: mdk
      run: |
        cmake -GNinja -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -H. -Bbuild/${TARGET_OS} -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk # no dSYM for lto, dsymutil: no debug symbols in executable (-arch x86_64)
    - name: Build
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk*.tar.xz ../mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.arch }}.tar.xz
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.arch}}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.arch}}.tar.xz
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' && matrix.arch == 'x86_64' }}
      shell: bash
      run: |
        sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}-${{ matrix.arch }}.tar.xz ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/


  macCatalyst:
    runs-on: macos-latest
    env:
      TARGET_OS: 'macCatalyst'
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
   # - name: Setup Xcode
   #   run: sudo xcode-select -s /Applications/Xcode_12.4.app
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
# why may failed to cache/restore /usr/local/bin/sshpass?
# no build cache because build dir content changes but key should not, then no cache save.
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: mdk
      run: cmake -GNinja -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/macCatalyst.cmake -DUSE_BITCODE=1 -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -H. -Bbuild/${TARGET_OS} -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk # no dSYM for lto, dsymutil: no debug symbols in executable (-arch x86_64)
    - name: Build
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk*.tar.xz ../mdk-sdk-${{ env.TARGET_OS }}.tar.xz
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.tar.xz
    - name: Upload to SourceForge
      shell: bash
      run: |
        sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.tar.xz ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/


  iOS:
    runs-on: macos-latest
    env:
      TARGET_OS: iOS
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: |
          ./mdk/external
          !./mdk/external/lib/macOS/libvulkan.tbd
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
# why may failed to cache/restore /usr/local/bin/sshpass?
# no build cache because build dir content changes but key should not, then no cache save.
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure CMake
      shell: bash
      working-directory: mdk
      run: cmake -GNinja -DWITH_DEB_INFO=0 -DUSE_LTO=thin -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/ios.cmake -DIOS_DEPLOYMENT_TARGET=8.0 -DIOS_ARCH="arm64" -DIOS_BITCODE=1 -H. -Bbuild/${TARGET_OS} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk -DCMAKE_VERBOSE_MAKEFILE=1 -DFFMPEG_EMBED=1 # FFMPEG_EMBED=0 to copy libffmpeg.4.dylib
    - name: Build
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        cmake -P build/${TARGET_OS}/cmake_install.cmake
        ../mksdk.sh mdk-sdk || echo done
        libffmpeg=$(find mdk-sdk/lib/mdk.framework -name "libffmpeg*.dylib")
        if [ -f "$libffmpeg" ]; then
          lipo -thin arm64 "$libffmpeg" -output "$libffmpeg"
        fi
        tar Jcfv mdk-sdk-$TARGET_OS.tar.xz mdk-sdk
        mv mdk-sdk*.tar.xz ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.tar.xz
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.tar.xz ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/

  iOSSimulator:
    runs-on: macos-latest
    env:
      TARGET_OS: iOSSimulator
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: |
          ./mdk/external
          !./mdk/external/lib/macOS/libvulkan.tbd
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
# why may failed to cache/restore /usr/local/bin/sshpass?
# no build cache because build dir content changes but key should not, then no cache save.
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure CMake
      shell: bash
      working-directory: mdk
      run: cmake -GNinja -DUSE_LTO=thin -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET=8.0 -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=NO -DCMAKE_IOS_INSTALL_COMBINED=YES -DCMAKE_OSX_SYSROOT=iphonesimulator -H. -Bbuild/${TARGET_OS} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk -DCMAKE_VERBOSE_MAKEFILE=1 -DFFMPEG_EMBED=1 # FFMPEG_EMBED=0 to copy libffmpeg.4.dylib
    - name: Build
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        cmake -P build/${TARGET_OS}/cmake_install.cmake
        ../mksdk.sh mdk-sdk || echo done
        libffmpeg=$(find mdk-sdk/lib/mdk.framework -name "libffmpeg*.dylib")
        if [ -f "$libffmpeg" ]; then
          lipo -thin x86_64 "$libffmpeg" -output "$libffmpeg"
        fi
        tar Jcfv mdk-sdk-$TARGET_OS.tar.xz mdk-sdk
        mv mdk-sdk*.tar.xz ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.tar.xz

  Apple:
    runs-on: macos-latest
    needs: [macOS, iOS, iOSSimulator, macCatalyst]
    steps:
    - uses: actions/checkout@v2
    - name: Download macOS sdk
      uses: actions/download-artifact@v2
      with:
        name: mdk-sdk-macOS-x86_64-MinSizeRel
    - name: Download macOS sdk
      uses: actions/download-artifact@v2
      with:
        name: mdk-sdk-macOS-arm64-MinSizeRel
    - name: Download iOS sdk
      uses: actions/download-artifact@v2
      with:
        name: mdk-sdk-iOS-MinSizeRel
    - name: Download iOSSimulator sdk
      uses: actions/download-artifact@v2
      with:
        name: mdk-sdk-iOSSimulator-MinSizeRel
    - name: Download macCatalyst sdk
      uses: actions/download-artifact@v2
      with:
        name: mdk-sdk-macCatalyst-MinSizeRel
    - name: Install tools
      shell: bash
      run: brew install p7zip hudochenkov/sshpass/sshpass
    - name: make XCFramework and SDK
      shell: bash
      run: |
        export XZ_OPT="-9e --threads=`getconf _NPROCESSORS_ONLN`"
        mkdir -p macOS iOS iOSSimulator macCatalyst mdk-sdk/{Frameworks,include,lib} macOS-arm64 macOS-x86_64
        tar Jxf mdk-sdk-macOS-x86_64.tar.xz -C macOS-x86_64
        tar Jxf mdk-sdk-macOS-arm64.tar.xz -C macOS-arm64
        tar Jxf mdk-sdk-iOS.tar.xz -C iOS
        tar Jxf mdk-sdk-iOSSimulator.tar.xz -C iOSSimulator
        tar Jxf mdk-sdk-macCatalyst.tar.xz -C macCatalyst
        find .
        cp -af macOS-x86_64/mdk-sdk macOS/ # libffmpeg is already fat
        lipo -create macOS-{arm,x86_}64/mdk-sdk/lib/mdk.framework/mdk -output macOS/mdk-sdk/lib/mdk.framework/Versions/Current/mdk
        lipo -create macOS-{arm,x86_}64/mdk-sdk/lib/mdk.framework.dSYM/Contents/Resources/DWARF/mdk -output macOS/mdk-sdk/lib/mdk.framework.dSYM/Contents/Resources/DWARF/mdk
        for b in `ls macOS-arm64/mdk-sdk/bin`; do # exes exist in both archs
          lipo -create macOS-{arm,x86_}64/mdk-sdk/bin/$b -output macOS/mdk-sdk/bin/$b
        done

        libffmpeg=$(find macCatalyst/mdk-sdk/lib/mdk.framework -name "libffmpeg*.dylib")
        xcrun bitcode_strip -r $libffmpeg -o $libffmpeg
        xcrun bitcode_strip -r macCatalyst/mdk-sdk/lib/mdk.framework/mdk -o macCatalyst/mdk-sdk/lib/mdk.framework/Versions/Current/mdk

        cp -af macOS/mdk-sdk/{bin,doc,*.sh} mdk-sdk
        cp -af macOS/mdk-sdk/README.md mdk-sdk/README-macOS.md
        cp -af macOS/mdk-sdk/lib/cmake mdk-sdk/lib/
        cp -af iOS/mdk-sdk/README.md mdk-sdk/README-iOS.md
        # https://developer.apple.com/forums/thread/655768 (error: the path does not point to a valid debug symbols file: macOS/mdk-sdk/lib/mdk.framework.dSYM)
        xcodebuild -create-xcframework -framework macOS/mdk-sdk/lib/mdk.framework -debug-symbols $PWD/macOS/mdk-sdk/lib/mdk.framework.dSYM -framework iOS/mdk-sdk/lib/mdk.framework -framework iOSSimulator/mdk-sdk/lib/mdk.framework -framework macCatalyst/mdk-sdk/lib/mdk.framework -output mdk-sdk/lib/mdk.xcframework
        mdkfw=`find mdk-sdk/lib/mdk.xcframework -name "macos-*" -depth 1`
        # ensure bin/* can Find mdk and ffmpeg
        ln -sf ${mdkfw/mdk-sdk/..}/mdk.framework mdk-sdk/Frameworks
        ln -sf ../Frameworks/mdk.framework/Headers mdk-sdk/include/mdk
        tar Jcvf mdk-sdk-apple.tar.xz mdk-sdk
        7z a mdk-sdk-apple.zip mdk-sdk
        tar Jcvf mdk-sdk-macOS.tar.xz -C macOS .
        cd macOS
        7z a ../mdk-sdk-macOS.zip mdk-sdk
    - name: Archieve XCFramework SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-apple
        path: mdk-sdk-apple.tar.xz
    - name: Archieve macOS SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-macOS
        path: mdk-sdk-macOS.tar.xz
    - name: Upload to SourceForge
      shell: bash
      run: |
        make -f upload.mk


  RaspberryPi_libcxx:
    runs-on: ubuntu-20.04
    env:
      TARGET_OS: 'raspberry-pi'
      LTO_SUFFIX: -lto
      LLVM_VER: 8
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.RPI_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure CMake
      shell: bash
      working-directory: mdk
      run: |
        pwd
        cmake -DUSE_LTO=thin -DCMAKE_C_COMPILER=clang-${LLVM_VER} -DCMAKE_CXX_COMPILER=clang++-${LLVM_VER} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/${TARGET_OS/r*pi/rpi}.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -GNinja -H$PWD -B$PWD/build/${TARGET_OS} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk  -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk*.tar.xz ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.tar.xz
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.tar.xz ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/


  Windows_clang:
    runs-on: ubuntu-20.04
    env:
      TARGET_OS: windows-desktop
      VCDIR: '/tmp/winsysroot/msvcrt-dev'
      WINDOWSSDKDIR: '/tmp/winsysroot/winsdk'
      VCVER: '14.27.29110'
      WINSDKVER: '10.0.19041.0'
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'

    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}-${{ secrets.GLFW_SDK_ID }}
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: /tmp/winsysroot
        key: sysroot-${{ env.TARGET_OS }}${{ env.WINSDKVER }}-vc${{ env.VCVER }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure for win arm64
      shell: bash
      env:
        ARCH: arm64
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        cmake -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for arm64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-arm64
    - name: Configure for win x86
      shell: bash
      env:
        ARCH: x86
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        cmake -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for x86
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-x86
    - name: Configure for win x64
      shell: bash
      env:
        ARCH: x64
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        cmake -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for x64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-x64
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk-*.7z ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.7z
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.7z ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/


  UWP_clang:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    env:
      TARGET_OS: uwp
      VCDIR: '/tmp/winsysroot/msvcrt-dev'
      WINDOWSSDKDIR: '/tmp/winsysroot/winsdk'
      VCVER: '14.27.29110'
      WINSDKVER: '10.0.19041.0'
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: /tmp/winsysroot
        key: sysroot-${{ env.TARGET_OS }}${{ env.WINSDKVER }}-vc${{ env.VCVER }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure for UWP arm
      if: ${{ matrix.config == 'Release' || matrix.config == 'MinSizeRel' }}
      shell: bash
      env:
        ARCH: arm
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        # MinSizeRel/Release instead of RelWithDebInfo because win arm debug is not supported in clang
        cmake -DWITH_DEB_INFO=0 -DUWP=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for UWP arm
      if: ${{ matrix.config == 'Release' || matrix.config == 'MinSizeRel' }}
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-arm
    - name: Configure for UWP arm64
      shell: bash
      env:
        ARCH: arm64
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        cmake  -DUWP=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for UWP arm64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-arm64
    - name: Configure for UWP x64
      shell: bash
      env:
        ARCH: x64
      working-directory: mdk
      run: |
        export WindowsSdkDir=${WINDOWSSDKDIR}
        export WindowsSDKVersion=$(cat ${WINDOWSSDKDIR}/.version)
        cmake  -DUWP=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/windows.clang.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for UWP x64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-x64
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk-*.7z ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.7z
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.7z ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/

# TODO: nuget

  Linux_libcxx:
    runs-on: ubuntu-20.04
    env:
      TARGET_OS: linux
      LTO_SUFFIX: -lto
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel]
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
    - name: 'Restore sysroot cache'
      id: sysroot-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/sysroot
        key: sysroot-${{ env.TARGET_OS }}-${{ secrets.LINUX_SYSROOT_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure for x64
      env:
        ARCH: amd64
      shell: bash
      working-directory: mdk
      run: cmake -DGLVA_STATIC_CXX=OFF -DUSE_LTO=thin -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/${TARGET_OS/r*pi/rpi}.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH}  -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for x64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-amd64
    - name: Configure for aarch64
      env:
        ARCH: arm64
      shell: bash
      working-directory: mdk
      run: cmake -DGLVA_STATIC_CXX=OFF -DUSE_LTO=thin -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/${TARGET_OS/r*pi/rpi}.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH}  -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for aarch64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-arm64
    - name: Configure for armhf
      env:
        ARCH: armhf
      shell: bash
      working-directory: mdk
      run: cmake -DGLVA_STATIC_CXX=OFF -DUSE_LTO=thin -DUSE_LIBCXX=1 -DCMAKE_SYSTEM_PROCESSOR=${ARCH} -DCMAKE_TOOLCHAIN_FILE=$PWD/cmake/tools/${TARGET_OS/r*pi/rpi}.clang.cmake -DLINUX_SYSROOT=$PWD/sysroot -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH}  -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for armhf
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-armhf
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk*.tar.xz ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.tar.xz
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.tar.xz ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/

  Android:
    runs-on: ubuntu-20.04
    env:
      TARGET_OS: android
      LTO_SUFFIX: -lto
      MIN_API: 16
    strategy:
      fail-fast: false
      matrix:
        config: [MinSizeRel] # https://github.com/android/ndk/issues/721
    steps:
    - uses: actions/checkout@v2
    - name: Checkout source
      uses: actions/checkout@v2
      with:
        repository: wang-bin/mdk
        path: mdk
        fetch-depth: 1
        token: ${{ secrets.CLONE_PAT }}
        submodules: 'recursive'
    - name: 'Restore External Dep cache'
      id: external-dep-cache
      uses: actions/cache@v2
      with:
        path: ./mdk/external
        key: external-dep-${{ env.TARGET_OS }}-ffmpeg-${{ env.FF_VER }}-${{ secrets.FF_SDK_ID }}
    - name: Create Build Environment
      shell: bash
      env:
        DEVTOOLS_CACHE_HIT: ${{ steps.devtools-cache.outputs.cache-hit }}
#        SYSROOT_CACHE_HIT: ${{ steps.sysroot-cache.outputs.cache-hit }}
        EXTERNAL_DEP_CACHE_HIT: ${{ steps.external-dep-cache.outputs.cache-hit }}
      working-directory: mdk
      run: ../ci-before-build.sh
    - name: Configure for armeabi-v7a
      env:
        ARCH: armeabi-v7a
      shell: bash
      working-directory: mdk
      run: cmake -DUSE_LTO=thin -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for armeabi-v7a
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-armeabi-v7a
    - name: Configure for arm64-v8a
      env:
        ARCH: arm64-v8a
      shell: bash
      working-directory: mdk
      run: |
        MIN_API_64=21
        [ $MIN_API -gt 21 ] && MIN_API_64=$MIN_API
        cmake -DUSE_LTO=thin -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API_64} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for arm64-v8a
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-arm64-v8a
    - name: Configure for x86
      env:
        ARCH: x86
      shell: bash
      working-directory: mdk
      run: cmake -DUSE_LTO=thin -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for x86
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-x86
    - name: Configure for x86_64
      env:
        ARCH: x86_64
      shell: bash
      working-directory: mdk
      run: |
        MIN_API_64=21
        [ $MIN_API -gt 21 ] && MIN_API_64=$MIN_API
        cmake -DUSE_LTO=thin -DANDROID_LD=lld -DANDROID_ABI=${ARCH} -DANDROID_PLATFORM=android-${MIN_API_64} -DANDROID_TOOLCHAIN=clang -DANDROID_STL=c++_shared -DANDROID_PIE=ON -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -GNinja -H$PWD -B$PWD/build/${TARGET_OS}-${ARCH} -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DCMAKE_INSTALL_PREFIX=$PWD/mdk-sdk-${ARCH} -DCMAKE_VERBOSE_MAKEFILE=1
    - name: Build for x86_64
      shell: bash
      working-directory: mdk
      run: cmake --build build/${TARGET_OS}-x86_64
    - name: Make SDK
      shell: bash
      working-directory: mdk
      run: |
        ../ci-after-build.sh
        mv mdk-sdk-*.7z ..
    - name: Archieve SDK
      uses: actions/upload-artifact@v2
      with:
        name: mdk-sdk-${{ env.TARGET_OS }}-${{ matrix.config }}
        path: mdk-sdk-${{ env.TARGET_OS }}.7z
    - name: Upload to SourceForge
      if: ${{ matrix.config == 'MinSizeRel' }}
      shell: bash
      run: sshpass -p ${SF_PW} scp -o StrictHostKeyChecking=no mdk-sdk-${TARGET_OS}.7z ${SF_USER}@frs.sourceforge.net:/home/frs/project/mdk-sdk/nightly/
